name: Publish Container Image

on:
  workflow_dispatch:
  release:
    types: [published, prereleased]

concurrency:
  group: release-container-${{ github.ref }}
  cancel-in-progress: true


env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-platform-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: true
      matrix:
        platform:
        - linux/amd64
        - linux/arm64
        - linux/arm

    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v3

    - name: Extract metadata of Platform
      id: platform_meta
      env:
        PLATFORM: ${{ matrix.platform }}
      run: |
        echo "os=$(dirname $PLATFORM)" >> $GITHUB_OUTPUT
        echo "arch=$(basename $PLATFORM)" >> $GITHUB_OUTPUT

    - name: Download release binary
      uses: robinraju/release-downloader@v1.8
      with:
        tag: ${{ github.ref_name }}
        fileName: vault-raft-snapshot-agent_${{ steps.platform_meta.outputs.os }}_${{ steps.platform_meta.outputs.arch }}
        out-file-path: dist
        tarBall: false
        zipBall: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Ensure valid image ref
      id: image_ref
      run: |
        echo "value=${IMAGE_REGISTRY}/${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

    - name: Extract metadata (tags, labels) of Image
      id: image_meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.image_ref.outputs.value }}

    - name: Login to Github Packages
      uses: docker/login-action@v2
      with:
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build image and push to GitHub Container Registry
      id: build
      uses: docker/build-push-action@v4
      with:
        push: true
        context: .
        file: .github/release.Dockerfile
        platforms: ${{ matrix.platform }}
        build-args: |
          DIST_DIR=./dist
          TARGETOS=${{ steps.platform_meta.outputs.os }}
          TARGETARCH=${{ steps.platform_meta.outputs.arch }}
        provenance: false
        labels: ${{ steps.image_meta.outputs.labels }}
        outputs: type=image,name=${{ steps.image_ref.outputs.value }},push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v3
      with:
        name: digests
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  publish-images:
    runs-on: ubuntu-latest
    needs:
    - build-platform-image

    steps:
    - name: Download digests
      uses: actions/download-artifact@v3
      with:
        name: digests
        path: /tmp/digests

    - name: Ensure valid image ref
      id: image_ref
      run: |
        echo "value=${IMAGE_REGISTRY}/${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

    - name: Extract metadata (tags, labels) of Image
      id: image_meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.image_ref.outputs.value }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Github Packages
      uses: docker/login-action@v2
      with:
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create manifest list and push
      working-directory: /tmp/digests
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ steps.image_ref.outputs.value }}@sha256:%s ' *)

    - name: Inspect image
      run: docker buildx imagetools inspect ${{ steps.image_ref.outputs.value }}:${{ steps.image_meta.outputs.version }}

  publish-release:
    runs-on: ubuntu-latest
    needs:
    - publish-images

    steps:
    - name: Get current release
      id: release
      uses: cardinalby/git-get-release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ github.ref_name }}
        prerelease: true

    - name: Publish release
      uses: irongut/EditRelease@v1.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        id: ${{ steps.release.outputs.id }}
        prerelease: false



